SISTEMAS OPERACIONAIS 13/02/2025

=================================
ASSUNTOS:
- Definição de PROCESSO;
- Definição de REENTRÂNCIA;
- Simulação de tempo de execução
  de processo;
=================================


-- Processo

Tudo em Sistemas Operacionais é PROCESSO.

O que é?

É um programa em execução. Ao contrário de "programa", que referencia algo estático (no sentido que um programa é único, independente dos recursos que ele apresenta), o conceito de "processo" é dinâmico, tendo em vista as mudanças constantes que ocorrem durante as operações. É uma entidade que representa uma tarefa.


-- Reentrância

"É a capacidade do sistema operacional de trazer o código executável para memória uma única vez e compartilhá-lo por diversos processos."

É uma funcionalidade da programação funcional.

A reentrância permite que diferentes partes de um programa sejam executadas de forma concorrente, aproveitando a disponibilidade do processador sem interferências entre si.

-- Simulação de Tempo de Execução de Processo

```python
import multiprocessing
import time

def meu_processo():
    print("Processo iniciado")
    time.sleep(10)
    print("Processo finalizado")

if __name__ == "__main__":
    inicio = time.time()

    processo = multiprocessing.Process(target=meu_processo)
    processo.start()
    processo.join()
    
    fim = time.time()
    print(f"Tempo decorrido: {fim - inicio:.4f} segundos")
    
    print("\nProcesso principal finalizado")
```

Múltiplas tarefas

```python
import multiprocessing
import time

def tarefa():
    inicio = time.time()
    print("Processo finalizado")
    fim = time.time()
    print(f"Tempo do processo: {fim - inicio:.4f}")

if __name__ == "__main__":
    print(multiprocessing.cpu_count())
    
    p1 = multiprocessing.Process(target=tarefa)
    p2 = multiprocessing.Process(target=tarefa)
    p3 = multiprocessing.Process(target=tarefa)
    p4 = multiprocessing.Process(target=tarefa)
    p5 = multiprocessing.Process(target=tarefa)
    p6 = multiprocessing.Process(target=tarefa)
    p7 = multiprocessing.Process(target=tarefa)
    p8 = multiprocessing.Process(target=tarefa)
    p9 = multiprocessing.Process(target=tarefa)
    p10 = multiprocessing.Process(target=tarefa)
    p11 = multiprocessing.Process(target=tarefa)
    p12 = multiprocessing.Process(target=tarefa)
    p13 = multiprocessing.Process(target=tarefa)

    p1.start()
    p2.start()
    p3.start()
    p4.start()
    p5.start()
    p6.start()
    p7.start()
    p8.start()
    p9.start()
    p10.start()
    p11.start()
    p12.start()
    p13.start()
    
    p1.join()
    p2.join()
    p3.join()
    p4.join()
    p5.join()
    p6.join()
    p7.join()
    p8.join()
    p9.join()
    p10.join()
    p11.join()
    p12.join()
    p13.join()
    
    print("Processos finalizados")
```

-- Thread

Uma Thread é a menor unidade de execução em um processo. Por isso, é possível realizar múltiplas tarefas de forma concorrente.
Porém, quando há menos núcleos de CPU do que Threads, o sistema usa ESCALONAMENTO para alternar rapidamente entre os processos, dando a impressão de paralelismo. Assim, uma tarefa, com vários comandos, pode ser interrompida no meio, dando início a outra tarefa, e então finalizando a primeira.
